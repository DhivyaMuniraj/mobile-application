plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'kotlin-parcelize'
    id 'dagger.hilt.android.plugin'
}

def versionMajor = 0 // Increment for major releases
def versionMinor = 0 // Increment for minor releases
def versionPatch = 1 // Increment for patches/fixes

def versionDebug = new Date().format('ddMMyyyy')
def appPackageId = 'com.ces.mobileappkitandroid'
def abiCodes = ['armeabi-v7a': 4, 'arm64-v8a': 5, mips: 6, 'x86': 7, 'x86_64': 8]

android {
    compileSdk 32

    defaultConfig {
        applicationId "${appPackageId}"
        minSdk 24
        targetSdk 32
        versionCode versionMajor * 1000 + versionMinor * 100 + versionPatch
        versionName "${versionMajor}.${versionMinor}.${versionPatch}"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
    }

    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }

    buildTypes {
        debug {
            debuggable true
            minifyEnabled false
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    flavorDimensions "default"
    productFlavors {
        dev {
            applicationIdSuffix ".dev"
            versionNameSuffix ".${versionDebug}.dev"
        }
        qa {
            applicationIdSuffix ".qa"
            versionNameSuffix ".${versionDebug}.qa"
        }
        staging {
            applicationIdSuffix ".staging"
            versionNameSuffix ".${versionDebug}.staging"
        }
        production {
        // Add requirements, right now left blank for default naming
        }
    }

    android.applicationVariants.all { variant ->
        variant.resValue "string", "version_name", "v${variant.versionName}"
        variant.outputs.all { output ->
            def abiVersionName = output.getFilter(com.android.build.OutputFile.ABI);
            if (abiVersionName != null) {
                def baseAbiVersionCode = abiCodes.get(abiVersionName)
                if (baseAbiVersionCode != null) {
                    output.versionCodeOverride = baseAbiVersionCode * 10000 + variant.versionCode
                }
                outputFileName = "${abiVersionName}.${variant.versionName}.${variant.buildType.name}.apk"
            } else {
                outputFileName = "universal.${variant.versionName}.${variant.buildType.name}.apk"
            }
        }
    }

    android.applicationVariants.all {
        variant ->
            variant.outputs.all {
                outputFileName = "${variant.name}.apk"
            }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        viewBinding true
        dataBinding true
    }
}

kapt {
    // Refer to the section, "Using Hilt with Kotlin" at,
    // https://dagger.dev/hilt/gradle-setup.html
    correctErrorTypes true
}

dependencies {

    implementation 'androidx.core:core-ktx:1.8.0'
    implementation 'androidx.appcompat:appcompat:1.5.0'
    implementation 'com.google.android.material:material:1.6.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.5.1'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.5.1'
    implementation 'androidx.navigation:navigation-fragment-ktx:2.5.1'
    implementation 'androidx.navigation:navigation-ui-ktx:2.5.1'
    implementation 'androidx.databinding:databinding-adapters:7.2.2'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'

    implementation project(path: ':androidframework')

    //MultiDex
    implementation 'androidx.multidex:multidex:2.0.1'

    // Coroutines
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.1'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.6.1'

    //Dagger - Hilt
    implementation 'com.google.dagger:hilt-android:2.39.1'
    kapt 'com.google.dagger:hilt-compiler:2.39.1'
    implementation "androidx.hilt:hilt-lifecycle-viewmodel:1.0.0-alpha03"
    kapt "androidx.hilt:hilt-compiler:1.0.0"
    annotationProcessor 'com.google.dagger:hilt-android-compiler:2.30-alpha'

    // Room
    implementation "androidx.room:room-runtime:2.4.3"
    kapt "androidx.room:room-compiler:2.4.3"

    // Kotlin Extensions and Coroutines support for Room
    implementation "androidx.room:room-ktx:2.4.3"

    // Datastore - preferences
    implementation("androidx.datastore:datastore-preferences:1.0.0")

    // Memory leaks
    // debugImplementation because LeakCanary should only run in debug builds.
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.7'

    // Supporting Multiple Screens
    implementation 'com.intuit.sdp:sdp-android:1.0.6'

    // Shadow layout library
    implementation("net.orandja.shadowlayout:shadowlayout:1.0.1")

    //    Rounded Image View
    implementation "io.getstream:avatarview-coil:1.0.3"

    // Swipe Refresh
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0'

    //Image Rendering api
    implementation 'com.github.bumptech.glide:glide:4.12.0'

    // Timber
    implementation 'com.jakewharton.timber:timber:5.0.1'

    //File Compression
    implementation 'id.zelory:compressor:3.0.1'

    // Networking..
    // Our networking API - API on top of OkHttp
    implementation "com.squareup.retrofit2:retrofit:2.9.0"
    // Json converters
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'
    // Underlying HTTP networking client
    // define a BOM and its version
    implementation(platform("com.squareup.okhttp3:okhttp-bom:4.9.2"))
    // define any required OkHttp artifacts without version
    implementation("com.squareup.okhttp3:logging-interceptor")
    // Serialization
    implementation 'com.google.code.gson:gson:2.8.9'

    // Import the Firebase BoM
    implementation platform('com.google.firebase:firebase-bom:29.0.4')
    // dependency for the firebase messaging // Push Notifications
    implementation 'com.google.firebase:firebase-messaging-ktx'

}